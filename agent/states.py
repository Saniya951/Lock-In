from typing import TypedDict, Optional, List
from pydantic import BaseModel, Field, ConfigDict

#for planner agent
class File(BaseModel):
    path: str=Field(description="The path to be created or modified")
    purpose: str=Field(description="The purpose of the file, e.g.'main application logic','data processing module', etc.")

# schema for planner agent
class Plan(BaseModel):
    name:str = Field(description="The name of app to be built")
    description:str = Field(description="A online description of the app to be built, e.g. ' A web application for managing personal tasks")
    techstack:str = Field(description="The tech stack to be used for the app. e.g. 'python','javascript', 'react', 'flask' etc.")
    features:list[str] = Field(description="The list of features that the app should have, e.g.'User authentication', 'data visualization' etc.")
    files: list[File] = Field(description="The list of files to be created,each with a 'path' and 'purpose'")

#for architect agent
class ImplementationTask(BaseModel):
    filepath: str=Field(description="The path of the file to be modified")
    task_description: str=Field(description="A detailed description of the task to be performed on the file, e.g. 'add user authentication', 'implement data processing logic', etc.")


# schema for architect agent
class TaskPlan(BaseModel):
    implementation_steps: list[ImplementationTask] = Field(description="A list of steps to be taken to implement the task")
    model_config = ConfigDict(extra="allow") # this will allow extra elements in the class even though its not defined

class ResearchQueries(BaseModel):
    queries: List[str] = Field(description="A list of 3-5 precise questions to search for in documentation.")
    
#for state management
class GraphState(TypedDict):
    """
    Represents the state of our graph.

    Attributes:
        user_prompt: The initial request from the user.
        plan: The project plan generated by the planner agent.
        task_plan: The detailed implementation tasks from the architect agent.
    """
    user_prompt: str
    plan: Optional[Plan]
    task_plan: Optional[TaskPlan]
    # A list of research questions generated by the researcher agent
    research_queries: Optional[List[str]]
    # The synthesized context from the documentation
    retrieved_context: Optional[str]